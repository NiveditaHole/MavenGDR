<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="5" passed="5" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-02-27T10:36:53Z" name="TestNG" finished-at="2020-02-27T10:37:49Z" duration-ms="55985">
    <groups>
    </groups>
    <test started-at="2020-02-27T10:36:53Z" name="TestNG" finished-at="2020-02-27T10:37:49Z" duration-ms="55985">
      <class name="Example.LoginFunctionality">
        <test-method is-config="true" signature="setup()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:06:53Z" name="setup" finished-at="2020-02-27T16:06:53Z" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:06:53Z" name="Login" finished-at="2020-02-27T16:07:03Z" duration-ms="9808" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:03Z" name="CheckInvalidEmailId" finished-at="2020-02-27T16:07:03Z" duration-ms="253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckInvalidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:03Z" name="getResult" finished-at="2020-02-27T16:07:04Z" duration-ms="735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckInvalidEmailId status=SUCCESS method=LoginFunctionality.CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:04Z" name="Login" finished-at="2020-02-27T16:07:14Z" duration-ms="10097" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:14Z" name="CheckValidEmailId" finished-at="2020-02-27T16:07:14Z" duration-ms="240" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckValidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:14Z" name="getResult" finished-at="2020-02-27T16:07:15Z" duration-ms="641" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckValidEmailId status=SUCCESS method=LoginFunctionality.CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:15Z" name="Login" finished-at="2020-02-27T16:07:24Z" duration-ms="9346" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginBlankUsername()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:24Z" name="LoginBlankUsername" finished-at="2020-02-27T16:07:25Z" duration-ms="953" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginBlankUsername -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:25Z" name="getResult" finished-at="2020-02-27T16:07:26Z" duration-ms="645" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginBlankUsername status=SUCCESS method=LoginFunctionality.LoginBlankUsername()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:26Z" name="Login" finished-at="2020-02-27T16:07:35Z" duration-ms="9410" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:35Z" name="LoginBlankdata" finished-at="2020-02-27T16:07:35Z" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginBlankdata -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:35Z" name="getResult" finished-at="2020-02-27T16:07:36Z" duration-ms="706" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginBlankdata status=SUCCESS method=LoginFunctionality.LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:36Z" name="Login" finished-at="2020-02-27T16:07:48Z" duration-ms="11820" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:48Z" name="LoginwithValidData" finished-at="2020-02-27T16:07:48Z" duration-ms="518" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginwithValidData -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:48Z" name="getResult" finished-at="2020-02-27T16:07:49Z" duration-ms="655" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginwithValidData status=SUCCESS method=LoginFunctionality.LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-27T16:07:49Z" name="tearDown" finished-at="2020-02-27T16:07:49Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Example.LoginFunctionality -->
    </test> <!-- TestNG -->
  </suite> <!-- TestNG -->
</testng-results>
