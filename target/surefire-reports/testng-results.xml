<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="5" passed="4" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-02-13T09:53:42Z" name="TestNG" finished-at="2020-02-13T09:54:45Z" duration-ms="63543">
    <groups>
    </groups>
    <test started-at="2020-02-13T09:53:42Z" name="TestNG" finished-at="2020-02-13T09:54:45Z" duration-ms="63543">
      <class name="Example.LoginFunctionality">
        <test-method is-config="true" signature="setup()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:53:42Z" name="setup" finished-at="2020-02-13T04:53:42Z" duration-ms="127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:53:42Z" name="Login" finished-at="2020-02-13T04:53:54Z" duration-ms="12230" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:53:54Z" name="CheckInvalidEmailId" finished-at="2020-02-13T04:53:54Z" duration-ms="234" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckInvalidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:53:54Z" name="getResult" finished-at="2020-02-13T04:53:55Z" duration-ms="670" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckInvalidEmailId status=SUCCESS method=LoginFunctionality.CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:53:55Z" name="Login" finished-at="2020-02-13T04:54:07Z" duration-ms="11890" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:07Z" name="CheckValidEmailId" finished-at="2020-02-13T04:54:07Z" duration-ms="193" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckValidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:07Z" name="getResult" finished-at="2020-02-13T04:54:08Z" duration-ms="636" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckValidEmailId status=SUCCESS method=LoginFunctionality.CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:08Z" name="Login" finished-at="2020-02-13T04:54:20Z" duration-ms="11886" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:20Z" name="LoginBlankdata" finished-at="2020-02-13T04:54:20Z" duration-ms="127" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Login] but found [Google Search]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Login] but found [Google Search]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at Example.LoginFunctionality.LoginBlankdata(LoginFunctionality.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginBlankdata -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:20Z" name="getResult" finished-at="2020-02-13T04:54:20Z" duration-ms="662" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginBlankdata status=FAILURE method=LoginFunctionality.LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:20Z" name="Login" finished-at="2020-02-13T04:54:32Z" duration-ms="12072" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginEmailID()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:32Z" name="LoginEmailID" finished-at="2020-02-13T04:54:33Z" duration-ms="896" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginEmailID -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:33Z" name="getResult" finished-at="2020-02-13T04:54:34Z" duration-ms="637" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginEmailID status=SUCCESS method=LoginFunctionality.LoginEmailID()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:34Z" name="Login" finished-at="2020-02-13T04:54:44Z" duration-ms="10231" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:44Z" name="LoginwithValidData" finished-at="2020-02-13T04:54:45Z" duration-ms="509" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginwithValidData -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:45Z" name="getResult" finished-at="2020-02-13T04:54:45Z" duration-ms="657" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginwithValidData status=SUCCESS method=LoginFunctionality.LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:54:45Z" name="tearDown" finished-at="2020-02-13T04:54:46Z" duration-ms="312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Example.LoginFunctionality -->
    </test> <!-- TestNG -->
  </suite> <!-- TestNG -->
</testng-results>
