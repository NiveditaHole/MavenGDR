<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="5" passed="5" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-02-13T09:33:27Z" name="TestNG" finished-at="2020-02-13T09:34:23Z" duration-ms="55671">
    <groups>
    </groups>
    <test started-at="2020-02-13T09:33:27Z" name="TestNG" finished-at="2020-02-13T09:34:23Z" duration-ms="55671">
      <class name="Example.LoginFunctionality">
        <test-method is-config="true" signature="setup()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:27Z" name="setup" finished-at="2020-02-13T04:33:27Z" duration-ms="178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:27Z" name="Login" finished-at="2020-02-13T04:33:36Z" duration-ms="9590" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:36Z" name="CheckInvalidEmailId" finished-at="2020-02-13T04:33:37Z" duration-ms="248" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckInvalidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:37Z" name="getResult" finished-at="2020-02-13T04:33:37Z" duration-ms="676" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckInvalidEmailId status=SUCCESS method=LoginFunctionality.CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:37Z" name="Login" finished-at="2020-02-13T04:33:46Z" duration-ms="8869" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:46Z" name="CheckValidEmailId" finished-at="2020-02-13T04:33:46Z" duration-ms="224" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckValidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:46Z" name="getResult" finished-at="2020-02-13T04:33:47Z" duration-ms="650" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckValidEmailId status=SUCCESS method=LoginFunctionality.CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:47Z" name="Login" finished-at="2020-02-13T04:33:57Z" duration-ms="10030" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:57Z" name="LoginBlankdata" finished-at="2020-02-13T04:33:57Z" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginBlankdata -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:57Z" name="getResult" finished-at="2020-02-13T04:33:58Z" duration-ms="656" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginBlankdata status=SUCCESS method=LoginFunctionality.LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:33:58Z" name="Login" finished-at="2020-02-13T04:34:09Z" duration-ms="11290" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginEmailID()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:34:09Z" name="LoginEmailID" finished-at="2020-02-13T04:34:10Z" duration-ms="878" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginEmailID -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:34:10Z" name="getResult" finished-at="2020-02-13T04:34:11Z" duration-ms="624" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginEmailID status=SUCCESS method=LoginFunctionality.LoginEmailID()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:34:11Z" name="Login" finished-at="2020-02-13T04:34:21Z" duration-ms="10589" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:34:21Z" name="LoginwithValidData" finished-at="2020-02-13T04:34:22Z" duration-ms="519" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginwithValidData -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:34:22Z" name="getResult" finished-at="2020-02-13T04:34:23Z" duration-ms="693" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginwithValidData status=SUCCESS method=LoginFunctionality.LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@19e4653c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Example.LoginFunctionality@19e4653c]" started-at="2020-02-13T04:34:23Z" name="tearDown" finished-at="2020-02-13T04:34:23Z" duration-ms="330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Example.LoginFunctionality -->
    </test> <!-- TestNG -->
  </suite> <!-- TestNG -->
</testng-results>
