<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="5" passed="5" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-02-20T09:40:45Z" name="TestNG" finished-at="2020-02-20T09:41:54Z" duration-ms="69219">
    <groups>
    </groups>
    <test started-at="2020-02-20T09:40:45Z" name="TestNG" finished-at="2020-02-20T09:41:54Z" duration-ms="69219">
      <class name="Example.LoginFunctionality">
        <test-method is-config="true" signature="setup()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:40:45Z" name="setup" finished-at="2020-02-20T04:40:45Z" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:40:45Z" name="Login" finished-at="2020-02-20T04:41:01Z" duration-ms="16450" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:01Z" name="CheckInvalidEmailId" finished-at="2020-02-20T04:41:01Z" duration-ms="222" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckInvalidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:01Z" name="getResult" finished-at="2020-02-20T04:41:01Z" duration-ms="69" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckInvalidEmailId status=SUCCESS method=LoginFunctionality.CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:01Z" name="Login" finished-at="2020-02-20T04:41:15Z" duration-ms="13643" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:15Z" name="CheckValidEmailId" finished-at="2020-02-20T04:41:15Z" duration-ms="229" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckValidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:15Z" name="getResult" finished-at="2020-02-20T04:41:15Z" duration-ms="111" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckValidEmailId status=SUCCESS method=LoginFunctionality.CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:15Z" name="Login" finished-at="2020-02-20T04:41:29Z" duration-ms="13185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:29Z" name="LoginBlankdata" finished-at="2020-02-20T04:41:29Z" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginBlankdata -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:29Z" name="getResult" finished-at="2020-02-20T04:41:29Z" duration-ms="67" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginBlankdata status=SUCCESS method=LoginFunctionality.LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:29Z" name="Login" finished-at="2020-02-20T04:41:42Z" duration-ms="12802" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginEmailID()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:42Z" name="LoginEmailID" finished-at="2020-02-20T04:41:43Z" duration-ms="919" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginEmailID -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:43Z" name="getResult" finished-at="2020-02-20T04:41:43Z" duration-ms="64" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginEmailID status=SUCCESS method=LoginFunctionality.LoginEmailID()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:43Z" name="Login" finished-at="2020-02-20T04:41:53Z" duration-ms="10769" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:53Z" name="LoginwithValidData" finished-at="2020-02-20T04:41:54Z" duration-ms="489" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginwithValidData -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:54Z" name="getResult" finished-at="2020-02-20T04:41:54Z" duration-ms="68" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginwithValidData status=SUCCESS method=LoginFunctionality.LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@563f38c4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Example.LoginFunctionality@563f38c4]" started-at="2020-02-20T04:41:54Z" name="tearDown" finished-at="2020-02-20T04:41:54Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Example.LoginFunctionality -->
    </test> <!-- TestNG -->
  </suite> <!-- TestNG -->
</testng-results>
