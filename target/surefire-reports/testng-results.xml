<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="5" passed="5" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-02-27T12:11:52Z" name="TestNG" finished-at="2020-02-27T12:12:48Z" duration-ms="55721">
    <groups>
    </groups>
    <test started-at="2020-02-27T12:11:52Z" name="TestNG" finished-at="2020-02-27T12:12:48Z" duration-ms="55721">
      <class name="Example.LoginFunctionality">
        <test-method is-config="true" signature="setup()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:41:52Z" name="setup" finished-at="2020-02-27T17:41:52Z" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:41:52Z" name="Login" finished-at="2020-02-27T17:42:02Z" duration-ms="10214" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:02Z" name="CheckInvalidEmailId" finished-at="2020-02-27T17:42:03Z" duration-ms="218" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckInvalidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:03Z" name="getResult" finished-at="2020-02-27T17:42:04Z" duration-ms="941" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckInvalidEmailId status=SUCCESS method=LoginFunctionality.CheckInvalidEmailId()[pri:0, instance:Example.LoginFunctionality@75d3a5e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:04Z" name="Login" finished-at="2020-02-27T17:42:13Z" duration-ms="9770" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:13Z" name="CheckValidEmailId" finished-at="2020-02-27T17:42:14Z" duration-ms="205" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CheckValidEmailId -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:14Z" name="getResult" finished-at="2020-02-27T17:42:14Z" duration-ms="670" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CheckValidEmailId status=SUCCESS method=LoginFunctionality.CheckValidEmailId()[pri:0, instance:Example.LoginFunctionality@75d3a5e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:14Z" name="Login" finished-at="2020-02-27T17:42:24Z" duration-ms="9305" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginBlankUsername()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:24Z" name="LoginBlankUsername" finished-at="2020-02-27T17:42:24Z" duration-ms="948" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginBlankUsername -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:24Z" name="getResult" finished-at="2020-02-27T17:42:25Z" duration-ms="659" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginBlankUsername status=SUCCESS method=LoginFunctionality.LoginBlankUsername()[pri:0, instance:Example.LoginFunctionality@75d3a5e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:25Z" name="Login" finished-at="2020-02-27T17:42:37Z" duration-ms="11411" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:37Z" name="LoginBlankdata" finished-at="2020-02-27T17:42:37Z" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginBlankdata -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:37Z" name="getResult" finished-at="2020-02-27T17:42:37Z" duration-ms="668" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginBlankdata status=SUCCESS method=LoginFunctionality.LoginBlankdata()[pri:0, instance:Example.LoginFunctionality@75d3a5e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="Login()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:37Z" name="Login" finished-at="2020-02-27T17:42:47Z" duration-ms="9277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Login -->
        <test-method signature="LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:47Z" name="LoginwithValidData" finished-at="2020-02-27T17:42:47Z" duration-ms="491" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginwithValidData -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:47Z" name="getResult" finished-at="2020-02-27T17:42:48Z" duration-ms="809" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LoginwithValidData status=SUCCESS method=LoginFunctionality.LoginwithValidData()[pri:0, instance:Example.LoginFunctionality@75d3a5e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Example.LoginFunctionality@75d3a5e0]" started-at="2020-02-27T17:42:48Z" name="tearDown" finished-at="2020-02-27T17:42:48Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Example.LoginFunctionality -->
    </test> <!-- TestNG -->
  </suite> <!-- TestNG -->
</testng-results>
